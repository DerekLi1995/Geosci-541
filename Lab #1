Problem Set 1
1. 
> class(mtcars)
[1] "data.frame"

2. 
> is(precip,"vector")
[1] TRUE

#Precip is a vector

3. 
> as.matrix(trees)

4. answer: Atlanta
> precip[14]
Atlanta 
48.3 

5.
> list(precip,trees,mtcars)

6. 
> typeof(precip)
   [1] "double"
Yes precip has numeric data, since R gives me double, which is a synonym of numeric.

7. 
> mtcars[2,7]
[1] 17.02

> mtcars[2,"qsec"]
[1] 17.02

> mtcars[ ,"qsec"][2]
[1] 17.02

> mtcars["Mazda RX4 Wag",7]
[1] 17.02

8.
> precip["Juneau"] <- 23
> precip[2]
Juneau 
    23 

> precip["Phoenix"] <- 46
> precip[3]
Phoenix 
     46 

> precip["Sacramento"] <- 12
> precip[6]
Sacramento 
        12 

9.
> trees[1] > trees[3]
      Girth
 [1,] FALSE
 [2,] FALSE
 [3,] FALSE
 [4,] FALSE
 [5,] FALSE
 [6,] FALSE
 [7,] FALSE
 [8,] FALSE
 [9,] FALSE
[10,] FALSE
[11,] FALSE
[12,] FALSE
[13,] FALSE
[14,] FALSE
[15,] FALSE
[16,] FALSE
[17,] FALSE
[18,] FALSE
[19,] FALSE
[20,] FALSE
[21,] FALSE
[22,] FALSE
[23,] FALSE
[24,] FALSE
[25,] FALSE
[26,] FALSE
[27,] FALSE
[28,] FALSE
[29,] FALSE
[30,] FALSE
[31,] FALSE

#There are no trees in the dataset with more girth than volume.

10.
> A<-sum(trees[,"Height"])
> B<-sum(mtcars["Valiant",])
> C<-sum(precip[1:8])
> C/B + A
[1] 2356.628


Problem set 2
Section 1
1.True: to tell the function to sample with replacement
  False: tell the function to sample without replacement

2.
> set.seed(541)
> MatrixElements<-sample(c(0,1), size = 96, replace=TRUE)
> MyMatrix<-array(data=MatrixElements,dim=c(8,12))
> MyMatrix
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
[1,]    1    0    0    0    1    1    1    0    0     0     0     1
[2,]    1    1    1    0    1    0    0    0    0     1     1     0
[3,]    1    1    0    0    0    0    1    1    0     0     0     0
[4,]    0    1    1    0    0    1    0    0    0     0     1     0
[5,]    0    0    1    0    0    0    1    0    1     0     1     1
[6,]    0    0    1    0    1    1    0    0    0     0     1     1
[7,]    0    1    0    1    0    1    1    0    0     0     0     1
[8,]    1    1    0    0    1    0    0    0    1     0     0     1

3. 
> apply(MyMatrix,1,all)
[1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE

Section 2
4.
> set.seed(154)
> MatrixElements<-sample(c(1,2,3,4,5,6,7,8,9,10), size = 96, replace=TRUE)
> MyMatrix<-matrix(MatrixElements,8,12)
> MyMatrix
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
[1,]    8    4    7    9    3    2    8    2    9     2     3     5
[2,]    8    6    8   10    5   10    7    9    1    10     8    10
[3,]    1    6    1    6    9    5    5    1    8     4    10     1
[4,]    7    1    5   10    2    2    3    7    7     2     9    10
[5,]    9    6    7    5    9    9    7    1    4     3    10     2
[6,]    1    2    9    9    2   10    8   10   10     4     7     3
[7,]    9    9    1    2   10    6    6    9    7    10     8     8
[8,]    8    3    7    7    7   10    7    7    7     7     4     3
> M<-(MyMatrix == 7)
> M
      [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9] [,10] [,11] [,12]
[1,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[2,] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE
[3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[4,]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE
[5,] FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE
[6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE
[7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE
[8,] FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE
> sum(M == TRUE)
[1] 16

5.
> apply(MyMatrix,1,sum)
[1] 5 6 4 4 5 5 5 5

6.
> apply(MyMatrix,2,prod)
 [1]  290304   46656  123480 3402000  340200 1080000 1975680   79380  987840
[10]  134400 4838400   72000

7.
> MyMatrix[which(MyMatrix==10)]<-12

8. 
> which(MyMatrix > 3 & MyMatrix < 8)
 [1]  4  9 11 13 17 20 21 24 27 29 32 34 40 43 47 50 51 53 55 56 60 64 68 69 71 72 75 78 80 86 88 89
By Counting, 32 values are greater than 3 and less than 8.

9.
> MyFrame<-data.frame(MyMatrix)
> MyFrame[,12]<-as(MyFrame[,12],"character")

10.
> Sums<-apply(MyMatrix,1,sum)
> Sums>70
[1] FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
> NewMatrix<-matrix(NA,nrow=8,ncol=13)
> NewFrame<-data.frame(NewMatrix)
> NewFrame[,1:12]<-MyMatrix
> NewFrame[,13]<-Sums>70
> NewFrame
  X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12   X13
1  8  4  7  9  3  2  8  2  9   2   3   5 FALSE
2  8  6  8 10  5 10  7  9  1  10   8  10  TRUE
3  1  6  1  6  9  5  5  1  8   4  10   1 FALSE
4  7  1  5 10  2  2  3  7  7   2   9  10 FALSE
5  9  6  7  5  9  9  7  1  4   3  10   2  TRUE
6  1  2  9  9  2 10  8 10 10   4   7   3  TRUE
7  9  9  1  2 10  6  6  9  7  10   8   8  TRUE
8  8  3  7  7  7 10  7  7  7   7   4   3  TRUE


Problem set 3
1.
> HelloWorld<-function(Message) {return(Message)}
> HelloWorld("Hello, World.")
[1] "Hello, World."

2.
> IrisFunction<-function(Dataset,Column) {
+   Categories<-unique(Dataset[ ,Column])
+   BlankList<-list()
+   for (i in 1:length(Categories)) {
+       BlankList[[i]]<-Dataset[which(Dataset[,Column]==Categories[i]),]
+       }
+   return(BlankList)
+   }
> IrisFunction(iris,"Species")

3.
> IrisFunction<-function(iris) {
+ AnswerVector<-array(NA,dim=dim(iris)[[1]])
+ for (index in 1:dim(iris)[[1]]) {
+ if (iris[index,"Sepal.Width"]>3.1) {
+ AnswerVector[index]<-iris[index,"Petal.Length"]+iris[index,"Sepal.Length"]}
+ else if (iris[index,"Sepal.Width"]<3.1) {
+ AnswerVector[index]<-iris[index,"Sepal.Length"]-iris[index,"Petal.Length"]}
+ }
+ return(AnswerVector)}

4.
> function(NumCylinders) {
+ CylinderSubset<-mtcars[which(mtcars[,"cyl"]==NumCylinders),]
+ Answer<-mean(CylinderSubset[,"mpg"])
+ return(Answer)
+ }

5.
> PowerBall<-function(NumDrawings) {
+ DrawsMatrix<-matrix(NA,nrow=NumDrawings,ncol=6)
+ for (draw in 1:NumDrawings) {
+ DrawsMatrix[draw,1:5]<-sample(c(1:69),5,replace=FALSE)
+ DrawsMatrix[draw,6]<-sample(c(1:26),1,replace=FALSE)}
+ return(DrawsMatrix)
+ }
> PowerBall(1000000)

6.
> PowerBall1<-function(MyNumbers) {
+ DrawsMatrix<-matrix(NA,nrow=1000000,ncol=6)
+ for (draw in 1:1000000) {
+ DrawsMatrix[draw,1:5]<-sample(c(1:69),5,replace=FALSE)
+ DrawsMatrix[draw,6]<-sample(c(1:26),1,replace=FALSE)}
+ TestForMatch<-array(NA,dim=1000000)
+ for (test in 1:1000000) {
+ TestForMatch[test]<-all(DrawsMatrix[test,]==MyNumbers)}
+ Result<-any(TestForMatch)
+ return(Result)}

Problem set 4
1.
> mean(precip)
[1] 34.88571
> median(precip)
[1] 36.6
> sd(precip)
[1] 13.70665

2.
Histogram will be a better option, because precip is continuous data.

3.
Random<-rnorm(length(precip),mean(precip),sd(precip))

4.
> ks.test(precip,RandomNormal)

	Two-sample Kolmogorov-Smirnov test

data:  precip and RandomNormal
D = 0.2, p-value = 0.1216
alternative hypothesis: two-sided

Because p-value, 0.1216, is larger than 0.05, we fail to reject the null hypothesis , which is that two vectors were drawn from identical distributions.

Answer:
> comparePrecip<-function(precip,RandomNormal,Iterations=100) {
+ MeanDifference<-mean(precip)-mean(RandomNormal)
+ Barrel<-c(precip,RandomNormal)
+ ReplicatedMeans<-array(data=NA,dim=Iterations)
+ for (Counter in 1:Iterations) {
+ NewPrecip<-sample(Barrel,length(precip),replace=TRUE)
+ NewRandomNormal<-sample(Barrel,length(RandomNormal),replace=TRUE)
+ PrecipMean<-mean(NewPrecip)
+ RandomMean<-mean(NewRandomNormal)
+ ReplicatedMeans[Counter]<-RandomMean-PrecipMean}
+ Percentage<-length(which(ReplicationResults>MeanDifference))/Iterationsreturn(Percentage)}

5.
> density(precip)
> density(RandomNormal)
#It depends, since the two distributions have similar peaks
#The price distribution has another small peak at around 15, whereas the RandomNormal does not.